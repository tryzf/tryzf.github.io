<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tryzf的博客]]></title>
  <link href="http://tryzf.github.io/atom.xml" rel="self"/>
  <link href="http://tryzf.github.io/"/>
  <updated>2016-03-13T21:46:24+08:00</updated>
  <id>http://tryzf.github.io/</id>
  <author>
    <name><![CDATA[tryzf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[和mongodb有关的问题]]></title>
    <link href="http://tryzf.github.io/blog/2016/03/13/node/"/>
    <updated>2016-03-13T21:18:05+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/03/13/node</id>
    <content type="html"><![CDATA[<blockquote><p>今天在用node获取mongodb里面的数据时候遇到了一个问题，获取数据的时候一直失败，err显示mongodb关闭。</p></blockquote>

<pre><code>SetBase.prototype.get = function(callback) {
    var name = this.name.name;
    mongodb.open(function(err, db) {
        if(err) {
            return callback(err);
        }
        db.collection('base', function(err, collection) {
            if(err) {
                collection.close();
                return callback(err);
            }
            collection.findOne({'name':name}, function(err, doc){
                mongodb.close();
                if(err) {
                    return callback(err);
                }
                callback(null, doc);
            });
        });

    });
}
</code></pre>

<p>以上是获取某条数据的方法，其他获取数据的方法也类似。遇到这个问题的情况是在：同一个页面打了两条的ajax获取不同collection下的数据，就造成了，后面获取数据的就会出错。<code>server localhost:27017 sockets closed</code>这个错误就是<code>mongodb.close();</code>造成的。因为有条请求成功后，就关闭了数据库，而紧跟其后的请求已经才操作一般发现被mongodb.close();所以就出错。</p>

<blockquote><p>我用了一个比较笨的方法解决了，这个问题。那就是在客服端用回调。让一个请求结束后在发起另一个请求，当然这也是一个很糟糕的解决方法。
为了更好的解决这个问题，就是在服务端写一个打开数据库方法。</p></blockquote>

<pre><code>var mongodb = require('mongodb');

var db_server = new mongodb.Server('127.0.0.1', 27017);
var db = mongodb.Db('blog', db_server);
var _instance = null;
function get_collection(name, callback){
    var collection = collection_map[name];
    if (collection){
        callback(null, collection);
        return;
    }

    if (_instance == null){
        db.open(function(err, db){
            if(err){
                callback(err);
                return;
            }
            _instance = db;
            get_collection(name, callback);
        });
    }else{
        _instance.collection(name, function(err, collection){
                if(err){
                callback(err);
                return;
            }
            collection_map[name] = collection;
            get_collection(name, callback);
        });
    }
}
</code></pre>

<p>让其在关闭状态的时候再打开一次。这样的解决方法就比较好，而且也可以解决我以上代码的冗余。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node]]></title>
    <link href="http://tryzf.github.io/blog/2016/03/07/node/"/>
    <updated>2016-03-07T23:13:15+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/03/07/node</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[express session的问题]]></title>
    <link href="http://tryzf.github.io/blog/2016/03/03/node-session/"/>
    <updated>2016-03-03T00:27:07+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/03/03/node-session</id>
    <content type="html"><![CDATA[<h1>Cannot set property &lsquo;user&rsquo; of undefined</h1>

<blockquote><p>注册看起来简单，但在实际操作中遇到很多问题，主要是不会太会调试nodejs代码，还有就是node的一些知识没有搞明白。花费了很长时间才完成注册的功能，主要花费的时间在上面那个错误。一直提示<code>user</code>of undefined 看看代码该搞的都搞了。cookie也在session前面了，折腾了好久后来把app.use(app.router);移动session下面问题就没有再出现，原来是没有吧session传进去，所以一直为定义。虽然有点奔溃，但还是解决了。可以安心的睡觉了…………</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毕业设计02]]></title>
    <link href="http://tryzf.github.io/blog/2016/03/01/02/"/>
    <updated>2016-03-01T23:12:35+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/03/01/02</id>
    <content type="html"><![CDATA[<h2>毕业设计02</h2>

<h5>今天是毕业设计第二天，昨天主要做了home页面，只是搭建了简答的头部和主要内容的左右模块，晚上主要给home页添加了一个弹筒，主要作用是让滚动条的滚动距离为0，当home页内容过多，需滚动垂直滚动条到底部。在这个时候如果要去顶部，再滚回去的话很麻烦。所以就制作了一个置顶按钮。</h5>

<p>&lt;% codeblock lang:javscript %></p>

<pre><code>function GoTop() {
    var fixed_obj = $("#js_fiexd_module");
    $(window).scroll(function(){
        var scroll_top = $(window).scrollTop();
        if(scroll_top &gt; 560) {
            fixed_obj.fadeIn(600).css({bottom:".3rem"});
        }else{
            fixed_obj.fadeOut(200);
        } 

    });
    fixed_obj.on("click", function(){
        $("html,body").animate({scrollTop:0},1000);
        var wind_h = $(window).height();
        fixed_obj.addClass("actives").animate({bottom:wind_h,opacity:0}, 1500, function(){
            fixed_obj.css({opacity:1,display:"none",bottom:"-.5rem"}).removeClass('actives');
        });
    });
}
</code></pre>

<p>&lt;% endcodeblock %></p>

<blockquote><p>主要的jquery代码，样式为刚开始是一个圆，鼠标移入变子弹头，点击触发上面这个事件。</p></blockquote>

<pre><code>    /*footer start*/
    .fiexd_module {display: none; position:fixed;bottom:.3rem;right:.2rem;background-color:#fff;overflow:hidden;border-radius:50%;
     width:.5rem;height:.5rem;font-size:.16rem;text-align: center;line-height:.5rem;color:#fff;background-color:#299982;cursor:pointer; 
    transition:height 1s,line-height 1s;}
    .fiexd_module:hover,.actives { height:1rem;line-height:1rem;border-top-right-radius:50%;border-top-left-radius: 50%;border-bottom-right-radius: 0;border-bottom-left-radius:0;  }
    /*footer end*/

    /*html*/
    &lt;div id="js_fiexd_module" class="fiexd_module"&gt;Go&lt;/div&gt;
</code></pre>

<blockquote><p>其他页面主要是登录和注册。主要是一张大图为背景，使用到css3的背景模糊<code>filter: blur(3px)</code>和 主要内容的背景透明<code>background:rgba(0,0,0,.4)</code></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毕业设计]]></title>
    <link href="http://tryzf.github.io/blog/2016/02/29/bs/"/>
    <updated>2016-02-29T23:13:48+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/02/29/bs</id>
    <content type="html"><![CDATA[<h2>毕业设计01</h2>

<h5>又是一个毕业季，现在变我愁着作业设计乍整好。多媒体班的同学搞小片，搞ps，想想自己也就会做网页。那也就不多想了毕业设计搞个小网站好了。考虑到实用性，那就搞一个博客，用nodejs写一个博客网站。环境已经搭好，模版引擎用ejs，数据库用mongodb，别的不会先把首页给搭出来。进过参考网上的一些设计，晚上简单的搭好首页。明天继续…………</h5>

<p><img src="http://ww1.sinaimg.cn/bmiddle/9ea24dfdgw1f1gmnxsmumj211y0lcgrw.jpg" alt="images" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nodejs在window下的安装]]></title>
    <link href="http://tryzf.github.io/blog/2016/02/27/nodejs/"/>
    <updated>2016-02-27T13:00:37+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/02/27/nodejs</id>
    <content type="html"><![CDATA[<h1>在window8下express -e 无效的问题</h1>

<h6>今天拿起了前几天买的node.js实战的书，开始nodejs实战之旅。我的电脑是window8，node的环境在以前就搭建好的。不过今天在初始化一个express项目的时候就遇到了问题。</h6>

<h6>书上说新建一个工程，打开命令行，输入：<code>express -e blog</code></h6>

<h6><code>blog</code>为项目名,命令行出错了!!!提示是无效的命令，书上不是说max、linux、windows都适用吗~~~刚开始就卡住了。心里有点小赛赛，已是通过bing.com，找啊找…………终于找到了有人发现问题的所在。</h6>

<h3>原来是我的express是4.0.0 ，把express改成3.5.0即可运行express 命令。</h3>

<pre><code> npm install -g express@3.5.0 
</code></pre>

<blockquote><p>在创建好目录，在进入该目录，<code>npm start</code>，ok站点就跑起来了。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016_2_26]]></title>
    <link href="http://tryzf.github.io/blog/2016/02/26/dddd/"/>
    <updated>2016-02-26T19:17:25+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/02/26/dddd</id>
    <content type="html"><![CDATA[<h1>用构建模块化开发摒弃全局变量的使用</h1>

<blockquote><p>JavaScript语言精粹</p></blockquote>

<h6>##语言精粹一书中在讲<code>Module</code>的时候提到：通过使用函数和闭包来构建模块，几乎可以完全摒弃全局变量的使用。</h6>

<h4>什么是模块呢？</h4>

<h6>#模块：是一个提供接口却隐藏状态与实现的函数或对象。</h6>

<ul>
<li><p>模块模式一般形式是：一个定义了私有变量和函数的函数，就是所提到的闭包。（<code>闭包：我简单的认为就是一个函数包着一个函数的函数，说的有点拗口</code>）。</p></li>
<li><p>利用闭包创建可以访问私有变量和函数的特权函数，（<code>这里说到的特权应该是指可以访问函数内部的变量</code>）</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby博客]]></title>
    <link href="http://tryzf.github.io/blog/2016/02/22/tryzf/"/>
    <updated>2016-02-22T21:26:20+08:00</updated>
    <id>http://tryzf.github.io/blog/2016/02/22/tryzf</id>
    <content type="html"><![CDATA[<h1>2016年2/24/1：05</h1>

<blockquote><p>用octopress成功搭建了个人博客，并部署到了github上。虽然整个过程都是根据教材走，但都是第一次使用git、github，还有环境的问题，也花费了挺长时间才搞好。这个过程学习的东西很多，git的简单使用，还有最让我兴奋的是自己在github上部署了自己的第一个项目。</p></blockquote>
]]></content>
  </entry>
  
</feed>
